name: Pull Request Workflow

on:
  pull_request:
    branches: [ master ]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  unit-tests:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test -- --coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    needs: lint
    runs-on: ubuntu-latest
    environment: integration
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests with coverage
        run: npm run test:e2e
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}

      - name: Upload E2E test coverage
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-coverage
          path: playwright-report/
          retention-days: 7

  status-comment:
    name: PR Status Comment
    needs: [lint, unit-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage

      - name: Download E2E test coverage
        uses: actions/download-artifact@v4
        with:
          name: e2e-test-coverage
          path: playwright-report

      - name: Create status comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const unitTestsStatus = "${{ needs.unit-tests.result }}";
            const e2eTestsStatus = "${{ needs.e2e-tests.result }}";
            const lintStatus = "${{ needs.lint.result }}";
            
            const statusEmoji = {
              success: "✅",
              failure: "❌",
              cancelled: "⚠️",
              skipped: "⏭️"
            };
            
            const comment = `## Pull Request Status
            
            | Job | Status |
            | --- | ------ |
            | Lint | ${statusEmoji[lintStatus] || "⚠️"} ${lintStatus} |
            | Unit Tests | ${statusEmoji[unitTestsStatus] || "⚠️"} ${unitTestsStatus} |
            | E2E Tests | ${statusEmoji[e2eTestsStatus] || "⚠️"} ${e2eTestsStatus} |
            
            ${unitTestsStatus === 'success' && e2eTestsStatus === 'success' ? '🎉 All tests passed successfully!' : '⚠️ Some checks failed, please review the results above.'}
            `;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Pull Request Status');
            });
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } 
